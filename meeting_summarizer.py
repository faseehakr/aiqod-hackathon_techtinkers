# -*- coding: utf-8 -*-
"""meeting summarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14FNBMQyFmxsHScbegX_Ov2_5pjO_lkEe
"""

from google.colab import drive
from google.colab import files # Import the 'files' object from google.colab

uploaded = files.upload()

import whisper
from pydub import AudioSegment
from transformers import pipeline
import spacy
from keybert import KeyBERT

def convert_mp3_to_wav(mp3_path, wav_path):
    audio = AudioSegment.from_mp3(mp3_path)
    audio = audio.set_channels(1).set_frame_rate(16000)
    audio.export(wav_path, format="wav")
    print(f"Converted {mp3_path} to {wav_path}")

def transcribe_audio_with_whisper(wav_path):
    model = whisper.load_model("small")
    result = model.transcribe(wav_path)
    return result["text"]

def summarize_text(text):
  summarizer = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")
  summary = summarizer(text, max_length=100, min_length=50, do_sample=False)
  return summary[0]['summary_text']

def extract_key_points(text):
    kw_model = KeyBERT()
    keywords = kw_model.extract_keywords(
        text,
        keyphrase_ngram_range=(1, 2),
        stop_words='english',
        top_n=8,
        use_maxsum=True,
        nr_candidates=20
    )
    return [kw[0] for kw in keywords]

def extract_named_entities(text):
    nlp = spacy.load("en_core_web_sm")
    doc = nlp(text)

    entities = {
        "People": [ent.text for ent in doc.ents if ent.label_ == "PERSON"],
        "Organizations": [ent.text for ent in doc.ents if ent.label_ == "ORG"],
        "Locations": [ent.text for ent in doc.ents if ent.label_ in ["GPE", "LOC"]]
    }

    return entities

def assign_tasks(key_points, entities):
    tasks = []
    for i, task in enumerate(key_points):
        assignee = entities["People"][i % len(entities["People"])] if entities["People"] else "Unassigned"
        tasks.append(f"{assignee} is assigned to {task}.")
    return tasks

mp3_file = "/content/webinar3.mp3"
wav_file = "/content/converted_audio.wav"

convert_mp3_to_wav(mp3_file, wav_file)
transcription = transcribe_audio_with_whisper(wav_file)
print("Full Transcription:\n", transcription)

summary = summarize_text(transcription)
print("\nSummarized Text:\n", summary)

key_points = extract_key_points(transcription)
print("\nKey Points for Tasks:\n", key_points)

entities = extract_named_entities(transcription)
print("\nIdentified People, Organizations, and Locations:\n", entities)

task_assignments = assign_tasks(key_points, entities)
print("\nAssigned Tasks:\n")
for task in task_assignments:
    print(task)

!pip install uvicorn pydub openai-whisper transformers

!pip install keybert